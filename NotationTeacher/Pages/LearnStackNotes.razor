@page "/stacknotes"
@using NotesAndScales
@inject NoteInputService NoteInputService
@inject DataService DataService

<PageTitle>Learn Stacked Notes</PageTitle>

@*Defines a div with a thick black border.*@
<style>
    .div-box {
        border: 5px solid black;
        padding-top: 15px;
        padding-left: 15px;
    }
</style>

<div class="div-box">
    <MidiInputBanner></MidiInputBanner>
</div>

@*The stave display.*@
<StaveDisplay @ref="staveDisplay"></StaveDisplay>

<br />
<button @onclick="GetChord">Skip Note</button>
<br />
<br />


@*Box container all previously played notes.*@
<div class="div-box">
    @foreach (string text in feedback.Reverse())
    {
        <p><b>@text</b></p>
    }
</div>

@*Expandable box showing data on all the notes.*@
<br />
<div class="div-box">
    <style>
        .side-text {
            display: block;
        }

        .side-text-container {
            padding-right: 15px;
        }

        .side-text-button {
            float: right;
            height: 40px;
        }
    </style>

    <div class="side-text-container">
        <button class="side-text-button" @onclick="ToggleBox">@(dataExpanded ? "Collapse" : "Expand")</button>
        <h2 class="side-text">Data</h2>
    </div>

    @if (dataExpanded)
    {
                // Shows a table with the treble and bass cleff notes.

        <style>
            th, td {
                padding-left: 15px;
                padding-right: 15px;
            }
        </style>

        <h3>Treble Notes</h3>

        <table>
            <tr>
                <th></th>
                <th>Total Attempts</th>
                <th>Rating</th>
            </tr>
            @foreach (NoteData data in DataService.DataHolder.NoteLearningData.TrebleNotes)
            {
                int successCount = data.CountAttempts();
                <tr>
                    <th style="background-color:@(successCount >= DataService.DataHolder.NoteLearningData.GoodNoteThreshold ? "#76fe8d" : (successCount > 0 ? "#ff794d" : "#969696"));">@(new Note(data.Note).Name)</th>
                    <td>@data.TotalAttempts</td>
                    <td>@(successCount)/@(DataService.DataHolder.NoteLearningData.MaxAttempts)</td>
                </tr>
            }
        </table>
        <br />
        <h3>Bass Notes</h3>

        <table>
            <tr>
                <th></th>
                <th>Total Attempts</th>
                <th>Rating</th>
            </tr>
            @foreach (NoteData data in DataService.DataHolder.NoteLearningData.BassNotes)
            {
                int successCount = data.CountAttempts();
                <tr>
                    <th style="background-color:@(successCount >= DataService.DataHolder.NoteLearningData.GoodNoteThreshold ? "#76fe8d" : (successCount > 0 ? "#ff794d" : "#969696"));">@(new Note(data.Note).Name)</th>
                    <td>@data.TotalAttempts</td>
                    <td>@(successCount)/@(DataService.DataHolder.NoteLearningData.MaxAttempts)</td>
                </tr>
            }
        </table>
        <br />
    }
</div>
<br />

@*Box container options.*@
<div class="div-box">
    <h2>Options</h2>

    <label>Use timer</label>
    <input @bind="useTimer" type="checkbox">
    <br />

    <label>Time (in seconds)</label>
    <input type="text" @bind="timerInputText" disabled="@(!useTimer)">
    <br />
    <br />

    <label>Clef</label>
    <select @bind="cleffSelectionString">
        <option value="bass">Bass Cleff</option>
        <option value="treble">Treble Cleff</option>
        <option value="both">Both</option>
    </select>
    <br />
    <br />
</div>
<br />

