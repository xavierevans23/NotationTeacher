@page "/learnnotes"
@using NotesAndScales
@inject NoteInputService NoteInputService
@inject DataService DataService
@implements IDisposable

<PageTitle>Learn Notes</PageTitle>

@*Defines a div with a thick black border.*@
<style>
    .div-box {
        border: 5px solid black;
        padding-top: 15px;
        padding-left: 15px;
    }
</style>

<div class="div-box">
    <MidiInputBanner></MidiInputBanner>
</div>

@*The stave display.*@
<StaveDisplay @ref="staveDisplay"></StaveDisplay>

<br />
<button @onclick="() => GetNote(true)">Skip Note</button>
<br />
<br />

@*Box container all previously played notes.*@
<div class="div-box">
    @foreach (string text in feedback.Reverse())
    {
        <p><b>@text</b></p>
    }
</div>

@*Expandable box showing data on all the notes.*@
<br />
<div class="div-box">
    <style>
        .side-text {
            display: block;
        }

        .side-text-container {
            padding-right: 15px;
        }

        .side-text-button {
            float: right;
            height: 40px;
        }
    </style>

    <div class="side-text-container">
        <button class="side-text-button" @onclick="ToggleBox">@(dataExpanded ? "Collapse" : "Expand")</button>
        <h2 class="side-text">Data</h2>
    </div>

    @if (dataExpanded)
    {
        // Shows a table with the treble and bass cleff notes.

        <style>
            th, td {
                padding-left: 15px;
                padding-right: 15px;
            }
        </style>

        <h3>Treble Notes</h3>

        <table>
            <tr>
                <th></th>
                <th>Total Attempts</th>
                <th>Rating</th>
            </tr>
            @foreach (NoteData data in DataService.DataHolder.NoteLearningData.TrebleNotes)
            {
                int successCount = data.CountAttempts();
                <tr>
                    <th style="background-color:@(successCount >= DataService.DataHolder.NoteLearningData.GoodNoteThreshold ? "#76fe8d" : (successCount > 0 ? "#ff794d" : "#969696"));">@(new Note(data.Note).Name)</th>
                    <td>@data.TotalAttempts</td>
                    <td>@(successCount)/@(DataService.DataHolder.NoteLearningData.MaxAttempts)</td>
                </tr>
            }
        </table>
        <br />
        <h3>Bass Notes</h3>

        <table>
            <tr>
                <th></th>
                <th>Total Attempts</th>
                <th>Rating</th>
            </tr>
            @foreach (NoteData data in DataService.DataHolder.NoteLearningData.BassNotes)
            {
                int successCount = data.CountAttempts();
                <tr>
                    <th style="background-color:@(successCount >= DataService.DataHolder.NoteLearningData.GoodNoteThreshold ? "#76fe8d" : (successCount > 0 ? "#ff794d" : "#969696"));">@(new Note(data.Note).Name)</th>
                    <td>@data.TotalAttempts</td>
                    <td>@(successCount)/@(DataService.DataHolder.NoteLearningData.MaxAttempts)</td>
                </tr>
            }
        </table>
        <br />
    }
</div>
<br />

@*Box container options.*@
<div class="div-box">
    <h2>Options</h2>

    <label>Use timer</label>
    <input @bind="useTimer" type="checkbox">
    <br />

    <label>Time (in seconds)</label>
    <input type="text" @bind="timerInputText" disabled="@(!useTimer)">
    <br />
    <br />

    <label>Clef</label>
    <select @bind="cleffSelectionString">
        <option value="bass">Bass Cleff</option>
        <option value="treble">Treble Cleff</option>
        <option value="both">Both</option>
    </select>
    <br />
    <br />    
</div>
<br />

@code {
    private NoteData currentNote = new();
    private Note? inputNote = null;
    private DateTime timeRecieved = DateTime.Now;    

    // The text telling the user if they got a note right or wrong.
    // Prepopulated feedback queue with invisible unicode.
    private readonly Queue<string> feedback = new Queue<string>(new[] { "⠀", "⠀", "⠀", "⠀", "⠀", "⠀", "⠀" });
    private readonly Random random = new();

    // Variables bound to inputs options.
    private bool useTimer = false;
    private string timerInputText = "2";
    private float timerLength => float.TryParse(timerInputText, out float time) ? time : 2;
    private string cleffSelectionString = "both";

    public void GetNote(bool requireNew)
    {
        NoteData oldNote = currentNote;

        // If requireNew is on, it will try 5 times to give a different note.
        int attempts = 5;
        while (currentNote == oldNote && attempts > 0 && requireNew)
        {
            bool useTrebleCleff;

            if (cleffSelectionString == "treble")
            {
                useTrebleCleff = true;
            }
            else if (cleffSelectionString == "bass")
            {
                useTrebleCleff = false;        
            }
            else
            {
                useTrebleCleff = random.Next(2) == 0;
            }

            currentNote = DataService.DataHolder.NoteLearningData.GetNextNote(useTrebleCleff);
            attempts--;
        }

        inputNote = null;
        timeRecieved = DateTime.Now;
    }

    public void GiveNote()
    {
        bool correct = inputNote is not null && inputNote.Number == currentNote.Note;
        bool inTime = (DateTime.Now - timeRecieved).TotalSeconds < timerLength;

        if (correct)
        {
            if (inTime || !useTimer)
            {
                feedback.Enqueue($"{new Note(currentNote.Note).Name} ✔️");
            }
            else
            {
                feedback.Enqueue($"{new Note(currentNote.Note).Name} ⏱");
            }
        }
        else
        {
            feedback.Enqueue($"{new Note(currentNote.Note).Name} ❌ (You played {(inputNote is not null ? inputNote.Name : "null")})");
        }

        while (feedback.Count > 7)
        {
            feedback.Dequeue();
        }

        DataService.DataHolder.NoteLearningData.GiveResult(currentNote, correct && inTime);
        GetNote(correct);

        Task.Run(DataService.SaveData);
        InvokeAsync(StateHasChanged);
    }

    protected override void OnParametersSet()
    {
        NoteInputService.NoteUpdate += RecieveUpdate;
    }

    // Unsubscribe from event to avoid intercepting the notes before another component.
    public void Dispose()
    {
        NoteInputService.NoteUpdate -= RecieveUpdate;
    }

    public void RecieveUpdate(object? sender, EventArgs e)
    {
        if (NoteInputService.Notes.Count > 0)
        {
            inputNote = NoteInputService.Notes.Last();
            GiveNote();
            NoteInputService.Clear();
        }

        InvokeAsync(StateHasChanged);
    }

    private StaveDisplay? staveDisplay;

    // Anytime the screen refreshed, update the notes using javascript.
    protected override void OnAfterRender(bool firstRender)
    {
        staveDisplay?.SetNotes(new() { new Note(currentNote.Note).Name }, "q", 1, 4, "4/4", currentNote.UseTrebleCleff ? "treble" : "bass");
    }

    // For the expandable data box.
    private bool dataExpanded = false;

    public void ToggleBox()
    {
        dataExpanded = !dataExpanded;
    }
}